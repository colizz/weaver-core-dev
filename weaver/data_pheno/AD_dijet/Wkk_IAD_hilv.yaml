### use `&`, `|`, `~` for logical operations on numpy arrays
### can use functions from `math`, `np` (numpy), and `ak` in the expression

selection: >-
    (dijet_mass >= 2500) & (dijet_mass < 3100)
    & ((event_class <= 18) | ((event_class > 18) & (event_no % 2 == 0)))

test_time_selection: >-
    (dijet_mass >= 2200) & (dijet_mass < 3400)

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `ak` in the expression
    # new input vars
    jet_1_nparticles_log: np.log(np.maximum(jet_1_nparticles, 1e-8))
    jet_1_sdmass_log: np.log(np.maximum(jet_1_sdmass, 1e-8))
    jet_1_tau1_log: np.log(np.maximum(jet_1_tau1, 1e-8))
    jet_1_tau2_log: np.log(np.maximum(jet_1_tau2, 1e-8))
    jet_1_tau3_log: np.log(np.maximum(jet_1_tau3, 1e-8))
    jet_1_tau4_log: np.log(np.maximum(jet_1_tau4, 1e-8))
    jet_2_nparticles_log: np.log(np.maximum(jet_2_nparticles, 1e-8))
    jet_2_sdmass_log: np.log(np.maximum(jet_2_sdmass, 1e-8))
    jet_2_tau1_log: np.log(np.maximum(jet_2_tau1, 1e-8))
    jet_2_tau2_log: np.log(np.maximum(jet_2_tau2, 1e-8))
    jet_2_tau3_log: np.log(np.maximum(jet_2_tau3, 1e-8))
    jet_2_tau4_log: np.log(np.maximum(jet_2_tau4, 1e-8))
    # training categories
    label_data: (dijet_mass >= 2500) & (dijet_mass < 3100) & (event_no % 2 == 0)
    label_bkg: (dijet_mass >= 2500) & (dijet_mass < 3100) & (event_no % 2 == 1) & (event_class <= 18)
    label_index: np.argmax(np.stack([label_data, label_bkg], -1), -1)

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction:

inputs:
    ft_vars:
        length: null
        vars:
            - [jet_1_sdmass_log, 3, 0.8]
            - [jet_1_nparticles_log, 4, 1.5]
            - [jet_1_tau1_log, -2, 1]
            - [jet_1_tau2_log, -3, 1]
            - [jet_1_tau3_log, -3.5, 1]
            - [jet_1_tau4_log, -4, 1]
            - [jet_2_sdmass_log, 3, 0.8]
            - [jet_2_nparticles_log, 4, 1.5]
            - [jet_2_tau1_log, -2, 1]
            - [jet_2_tau2_log, -3, 1]
            - [jet_2_tau3_log, -3.5, 1]
            - [jet_2_tau4_log, -4, 1]
    label_vars:
        length: null
        vars:
            - [label_index, null]

labels:
    ### type can be `simple`, `custom`, 'hybrid'
    type: simple
    value: [label_data, label_bkg]


observers:
    - event_no
    - event_class
    - dijet_mass

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      label_data: [-100000, 100000] # dummy
      label_bkg: [-100000, 100000] # dummy
   reweight_classes: [label_data, label_bkg]
   reweight_threshold: 0
   class_weights: [1, 1]
   reweight_hists:
